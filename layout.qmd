---
title: ""
navbar: false
sidebar: false
echo: false
format:
  html:
    page-layout: custom
    grid:
      sidebar-width: 0px
      margin-width: 0px
      gutter-width: 0em
---
```{python}
import geopandas as gpd
import folium
import pandas as pd
import numpy as np

wardlist = ["千代田区", "中央区", "港区", "新宿区", "文京区", "台東区", "墨田区", "江東区", 
        "品川区", "目黒区", "大田区", "世田谷区", "渋谷区", "中野区", "杉並区", "豊島区", "北区", 
        "荒川区", "板橋区", "練馬区", "足立区", "葛飾区", "江戸川区"]
ward2roman = {
    "千代田区": "Chiyoda",
    "中央区": "Chuo",
    "港区": "Minato",
    "新宿区": "Shinjuku",
    "文京区": "Bunkyo",
    "台東区": "Taito",
    "墨田区": "Sumida",
    "江東区": "Koto",
    "品川区": "Shinagawa",
    "目黒区": "Meguro",
    "大田区": "Ota",
    "世田谷区": "Setagaya",
    "渋谷区": "Shibuya",
    "中野区": "Nakano",
    "杉並区": "Suginami",
    "豊島区": "Toshima",
    "北区": "Kita",
    "荒川区": "Arakawa",
    "板橋区": "Itabashi",
    "練馬区": "Nerima",
    "足立区": "Adachi",
    "葛飾区": "Katsushika",
    "江戸川区": "Edogawa"
}

wards = gpd.read_file("../GIS/tokyoshp/N03-20240101_13.shp")
wards = wards[wards.N03_004.isin(wardlist)]
wards = wards.drop(wards.columns[[0, 1, 2, 4, 5]], axis=1)
wards.columns = ["Ward", "geometry"]
wards["Ward Rom"] = wards["Ward"].map(ward2roman)


blocks = gpd.read_file("../ASS2/GIS/bounds/r2ka13.shp")
blocks = blocks[blocks.CITY_NAME.notna()]
blocks = blocks[(blocks.CITY_NAME.str.contains("区"))]
blocks = blocks.drop(blocks.columns[[0, 1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]], axis=1)
blocks.columns = ["Ward", "Block", "Area", "geometry"]
blocks["Ward Rom"] = blocks["Ward"].map(ward2roman)
blocks.insert(1, "Ward Rom", blocks.pop("Ward Rom"))

m = folium.Map([35.66, 139.74], zoom_start=11)

folium.GeoJson(
    blocks,
    name="Blocks",
    style_function=lambda x: {
        "fillColor": "#ff8700",
        "color": "#000000",
        "fillOpacity": 0.3,
        "weight": 1
    }, 
    show=False,
    tooltip=folium.GeoJsonTooltip(fields=["Ward", "Ward Rom", "Block", "Area"])
).add_to(m)

folium.GeoJson(
    wards,
    name="Wards",
    style_function=lambda x: {
        "fillColor": "#0078ff",
        "color": "#000000",
        "fillOpacity": 0.3,
        "weight": 2
    },
    show=False,
    tooltip=folium.GeoJsonTooltip(fields=["Ward", "Ward Rom"])
).add_to(m)


blocks = gpd.read_file("../ASS2/GIS/bounds/r2ka13.shp")
blocks = blocks[blocks.CITY_NAME.notna()]
blocks = blocks[(blocks.CITY_NAME.str.contains("区"))]
blocks = blocks.drop(blocks.columns[[0, 1, 2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]], axis=1)
blocks.columns = ["Ward", "Block", "Area", "geometry"]
blocks["cityblockmerge"] = blocks.Ward.str.strip() + blocks.Block.str.strip()
blocks = blocks.drop(blocks.columns[[0, 1]], axis=1)

population = pd.read_csv("../ASS2/CENSUS/2010-2-2.csv", encoding="Shift-JIS")
# population = population.drop(population.columns[[0]], axis=1)
population.columns = ["Ward", "Town", "Block", "Population", "Male", "Female", "Households"]
population["blockmergename"] = population.Ward + population.Town + population.Block
population.blockmergename = population.blockmergename.str.strip()
population["Ward Rom"] = population.Ward.map(ward2roman)
population.insert(1, "Ward Rom", population.pop("Ward Rom"))

num = {"１": "一", "２": "二", "３": "三", "４": "四", "５": "五", "６": "六", "７": "七", "８": "八", "９": "九"}
chars = {"ケ": "ヶ"}

for k, v in num.items():
    population.blockmergename = population.blockmergename.str.replace(k,v)
for k, v in chars.items():
    blocks.cityblockmerge = blocks.cityblockmerge.str.replace(k,v)
    population.blockmergename = population.blockmergename.str.replace(k,v)

merged_pop = blocks.merge(population, left_on="cityblockmerge", right_on="blockmergename", how="outer",indicator=True)
merged_pop[merged_pop._merge == "both"]
for i in ["Population", "Male", "Female", "Households"]:
    merged_pop.loc[merged_pop._merge == "left_only", i] = np.nan 
    merged_pop.loc[merged_pop[i] == "No Data", i] = np.nan
merged_pop["Population"] = pd.to_numeric(merged_pop["Population"], errors="coerce")  
merged_pop["Area"] = pd.to_numeric(merged_pop["Area"], errors="coerce")
merged_pop["Density"] = np.divide(
   merged_pop["Population"], 
   merged_pop["Area"], 
   out=np.zeros_like(merged_pop["Population"], dtype=float), 
   where=merged_pop["Area"]!=0
)
merged_pop["Density"] = np.where(
   (merged_pop["Population"].isna()) | (merged_pop["Area"].isna()),
   np.nan,
   merged_pop["Density"]
)
merged_pop.Density = merged_pop.Density * 10000
merged_pop = merged_pop[(~(merged_pop.cityblockmerge=="港区台場１丁目")&~(merged_pop.Density>1900))]

folium.Choropleth(
    geo_data=merged_pop,
    name="Density",
    data=merged_pop,
    columns=[merged_pop.index, "Density"],
    key_on="feature.id",
    nan_fill_color="blue",
    nan_fill_opacity=0.3,
    bins = [0, 100, 200, 300, 400, 700, 1000],
    fill_color="YlOrRd",
    fill_opacity=0.8,
    line_opacity=0.3,
    legend_name="Density Population per Hectare"
).add_to(m)


folium.LayerControl().add_to(m)
m
```